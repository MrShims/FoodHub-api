version: '3'
services:

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    container_name: keycloak
    command: ["start-dev","--import-realm"]
    ports:
      - "8888:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: MrShim
    volumes:
      - ./realms/:/opt/keycloak/data/import/
  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  broker:
    container_name: broker
    image: 'confluentinc/cp-kafka:latest'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:7.3.2
    ports:
      - 8085:8085
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:29092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_CLIENT_AUTHENTICATION: BASIC
      SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: MrShim:123
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="MrShim" password="123"
  redis:
    image: redis:latest
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    environment:
      - REDIS_PASSWORD=MrShim
  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./tempo/tempo-data:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  grafana:
      image: grafana/grafana-oss
      container_name: grafana
      restart: always
      ports:
        - "3000:3000"
      links:
        - prometheus:prometheus
      volumes:
        - ./grafana:/etc/grafana/provisioning/datasources:ro
      environment:
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        - GF_AUTH_DISABLE_LOGIN_FORM=true
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
  discovery-server:
    build: ./discovery-service
    container_name: discovery-server
    deploy:
      replicas: 0
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    deploy:
      replicas: 0
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - discovery-server
      - keycloak
  menu-service:
    container_name: menu-service
    build: ./menu-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker`
    deploy:
      replicas: 0
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
    depends_on:
      - "broker"
      - "schema-registry"
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8085
      DYNAMIC_CONFIG_ENABLED: 'true'